openapi: 3.0.0
info:
  title: user
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /users/:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '201':
          description: |-
            User Created,

            access_token을 통해 authentication을 진행하며, 만료 후에는 /user/auth/를 통해 access_token을 새로 발급받아야합니다. access token을 새로 발급받을 때에 refresh_token 또한 새로 발급됩니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenUser'
              examples:
                post user example:
                  value:
                    id: 21
                    access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1tbWFzIiwiaWQiOjIxLCJpYXQiOjE2MTMyNzk1NjgsImV4cCI6MTYxMzI4MzE2OH0.f-3buI9Hku6j15r7MRFmTFrkopYEgeBBvkGxXMweMGw
                    refresh_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Im1tbWFzIiwiaWQiOjIxLCJpYXQiOjE2MTMyNzk1Njh9.Sl-785nKn45ZKAZyX1r2IYrqc8OnctuOSCTaWryIeEc
            application/xml:
              schema:
                type: object
                properties: {}
            multipart/form-data:
              schema:
                type: object
                properties: {}
            text/html:
              schema:
                type: object
                properties: {}
            text/plain:
              schema:
                type: object
                properties: {}
            application/EDI-X12:
              schema:
                type: object
                properties: {}
            json:
              schema:
                type: object
                properties: {}
          headers: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  statusCode:
                    type: number
                  message:
                    type: string
                    minLength: 1
                  error:
                    type: string
                    minLength: 1
                required:
                  - statusCode
                  - message
                  - error
              examples:
                아이디 중복 시:
                  value:
                    statusCode: 400
                    message: 이미 동일한 아이디가 사용중입니다.
                    error: Bad Request
                닉네임 중복 시:
                  value:
                    statusCode: 400
                    message: 이미 동일한 닉네임이 사용중입니다.
                    error: Bad Request
            application/xml:
              schema:
                type: object
                properties: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
                - token
            examples:
              post user example:
                value:
                  token: example
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
    parameters: []
  /users/auth/token/:
    parameters: []
    post:
      summary: User Authentication
      operationId: post-user-auth
      responses:
        '200':
          description: 'access_token을 통해 authentication을 진행하며, 만료 후에는 /user/auth/token/를 통해 access_token을 새로 발급받아야합니다. access token을 새로 발급받을 때에 refresh_token 또한 새로 발급됩니다.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokenUser'
              examples:
                example-1:
                  value:
                    id: 1
                    access_token: access_token
                    refresh_token: refresh_token
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  statusCode:
                    type: number
                  message:
                    type: string
                    minLength: 1
                  error:
                    type: string
                    minLength: 1
                required:
                  - statusCode
                  - message
                  - error
              examples:
                example-1:
                  value:
                    statusCode: 400
                    message: 'grant_type must be one of the following values: password, refresh_token'
                    error: Bad Request
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    statusCode: 401
                    message: 아이디 혹은 비밀번호가 잘못되었습니다.
                    error: Unauthorized
                properties:
                  statusCode:
                    type: number
                  message:
                    type: string
                    minLength: 1
                  error:
                    type: string
                    minLength: 1
                required:
                  - statusCode
                  - message
              examples:
                refresh token 인증 실패 시:
                  value:
                    statusCode: 401
                    message: Unauthorized
                'id/password 인증 실패 시 ':
                  value:
                    statusCode: 401
                    message: 아이디 혹은 비밀번호가 잘못되었습니다.
                    error: Unauthorized
      description: user authentication
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
            examples:
              refresh_token authentication  // token should be given to Authorization header:
                value: {}
        description: |-
          refresh_token 인증 방법을 이용할 시 

          header에 refresh_token이 Authorization으로 제공되어야 합니다.
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: 'Bearer [refresh_token]'
  /users/me/fcm/topics:
    delete:
      summary: ''
      operationId: delete-users-me-fcm-topics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value:
                    - result1
                    - result2
      description: |-
        유저가 구독하는 태그를 모두 fcm에서 body의 토큰에 구독취소 합니다
        response : fcm response를 배열로 전달.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                token:
                  type: string
                  minLength: 1
              required:
                - token
              x-examples:
                example-1:
                  token: token string
            examples:
              example-1:
                value:
                  token: token string
    post:
      summary: ''
      operationId: post-users-me-fcm-topics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: ''
                minItems: 1
                uniqueItems: true
                items:
                  type: object
                  required: []
                  properties: {}
                x-examples:
                  example-1:
                    - result1
                    - result2
              examples:
                example-1:
                  value:
                    - result1
                    - result2
      description: |-
        유저가 구독하는 태그를 모두 fcm에서 body의 토큰에 구독 합니다
        response : fcm response를 배열로 전달.
components:
  schemas:
    User:
      description: ''
      type: object
      x-examples:
        example-1:
          id: 1
          username: eldpswp99
          nickname: nickname
          keywords:
            - 장학
            - 인턴
      properties:
        id:
          type: number
        email:
          type: string
          minLength: 1
      required:
        - id
        - email
    tokenUser:
      description: ''
      type: object
      x-examples:
        example-1:
          id: 1
          username: eldpswp99
          nickname: nickname
          access_token: access_token
          refresh_token: refresh_token
          expires_at: '2020-03-16T17:40:00+09:00'
          keywords:
            - 장학
      properties:
        id:
          type: number
        access_token:
          type: string
          minLength: 1
        refresh_token:
          type: string
          minLength: 1
      required:
        - id
        - access_token
        - refresh_token
    Unauthorized:
      description: ''
      type: object
      properties:
        statusCode:
          type: number
        message:
          type: string
          minLength: 1
      required:
        - statusCode
        - message
      x-examples:
        example-1:
          statusCode: 401
          message: Unauthorized
